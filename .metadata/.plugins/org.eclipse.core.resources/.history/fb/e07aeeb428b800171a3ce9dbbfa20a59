package com.qq.server.model;
import java.net.*;
import java.io.*;
import com.qq.common.*;
import com.qq.server.manager.*;
/*
 * to Create the thread to get message
 */
public class ServerConClientThread extends Thread{

	private Socket s;
	public ServerConClientThread(Socket s) {
		
		this.s = s;
	}
	
	public Socket getS() {
		return s;
	}

	public void setS(Socket s) {
		this.s = s;
	}

	@Override
	public void run() {
		while(true){
			try{
				System.out.println("wait to get information");
				ObjectInputStream ois = new ObjectInputStream(s.getInputStream());
				Message m =(Message) ois.readObject();
				if(m.getMesType().equals(MessType.comMessage)){
					System.out.println(m.getSender()+"发送给"+m.getReciever()+":"+m.getMessage()+" at "+m.getSendTime());
					if(ManagerConnectUser.getClientThread(m.getReciever()) != null){
						Socket sR =ManagerConnectUser.getClientThread(m.getReciever()).getS();
						ObjectOutputStream oos = new ObjectOutputStream(sR.getOutputStream());
						oos.writeObject(m);
					}
					else{
						System.out.println(m.getReciever()+" is  offline");
						System.out.println("Can not send "+m.getReciever()+" message");
					}
						
					System.out.println(m.getSender()+"发送给"+m.getReciever()+":"+m.getMessage());
				}	
				else if(m.getMesType().equals(MessType.requestFriendList)){
					System.out.println("Get the login information");
					
				}
				else if(m.getMesType().equals(MessType.requestOnLineList)){
					System.out.println("to get the on line information");
					Message returnM = new Message();
					returnM.setMesType(MessType.returnOnlineList);
					returnM.setAllUserInfos(ManagerConnectUser.getOnlineUser());
					returnM.setSender(m.getSender());
					Socket sR =ManagerConnectUser.getClientThread(m.getSender()).getS();
					ObjectOutputStream oos = new ObjectOutputStream(sR.getOutputStream());
					oos.writeObject(returnM);
				}
				else if (m.getMesType().equals(MessType.logOut)){
					closeSocket();
					ManagerConnectUser.removeConnectThread(m.getSender());
					break;
				}
			
			}catch (Exception e) {
				e.printStackTrace();
				//TODO to end the thread when Logout
			}
		}
	}
	public void closeSocket(){
		try{
			s.close();
		}catch(Exception e){
			e.printStackTrace();
		}
	}

}
